{"version":3,"file":"span.js","sourceRoot":"","sources":["../src/span.ts"],"names":[],"mappings":"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","sourcesContent":["// tslint:disable:max-classes-per-file\n\nimport { getCurrentHub, Hub } from '@sentry/hub';\nimport { Span as SpanInterface, SpanContext, SpanStatus } from '@sentry/types';\nimport { dropUndefinedKeys, isInstanceOf, logger, timestampWithMs, uuid4 } from '@sentry/utils';\n\n// TODO: Should this be exported?\nexport const TRACEPARENT_REGEXP = new RegExp(\n  '^[ \\\\t]*' + // whitespace\n  '([0-9a-f]{32})?' + // trace_id\n  '-?([0-9a-f]{16})?' + // span_id\n  '-?([01])?' + // sampled\n    '[ \\\\t]*$', // whitespace\n);\n\n/**\n * Keeps track of finished spans for a given transaction\n */\nclass SpanRecorder {\n  private readonly _maxlen: number;\n  private _openSpanCount: number = 0;\n  public finishedSpans: Span[] = [];\n\n  public constructor(maxlen: number) {\n    this._maxlen = maxlen;\n  }\n\n  /**\n   * This is just so that we don't run out of memory while recording a lot\n   * of spans. At some point we just stop and flush out the start of the\n   * trace tree (i.e.the first n spans with the smallest\n   * start_timestamp).\n   */\n  public startSpan(span: Span): void {\n    this._openSpanCount += 1;\n    if (this._openSpanCount > this._maxlen) {\n      span.spanRecorder = undefined;\n    }\n  }\n\n  /**\n   * Appends a span to finished spans table\n   * @param span Span to be added\n   */\n  public finishSpan(span: Span): void {\n    this.finishedSpans.push(span);\n  }\n}\n\n/**\n * Span contains all data about a span\n */\nexport class Span implements SpanInterface, SpanContext {\n  /**\n   * The reference to the current hub.\n   */\n  private readonly _hub: Hub = (getCurrentHub() as unknown) as Hub;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _traceId: string = uuid4();\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _spanId: string = uuid4().substring(16);\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _parentSpanId?: string;\n\n  /**\n   * @inheritDoc\n   */\n  public sampled?: boolean;\n\n  /**\n   * Timestamp in seconds when the span was created.\n   */\n  public startTimestamp: number = timestampWithMs();\n\n  /**\n   * Timestamp in seconds when the span ended.\n   */\n  public timestamp?: number;\n\n  /**\n   * @inheritDoc\n   */\n  public transaction?: string;\n\n  /**\n   * @inheritDoc\n   */\n  public op?: string;\n\n  /**\n   * @inheritDoc\n   */\n  public description?: string;\n\n  /**\n   * @inheritDoc\n   */\n  public tags: { [key: string]: string } = {};\n\n  /**\n   * @inheritDoc\n   */\n  public data: { [key: string]: any } = {};\n\n  /**\n   * List of spans that were finalized\n   */\n  public spanRecorder?: SpanRecorder;\n\n  public constructor(spanContext?: SpanContext, hub?: Hub) {\n    if (isInstanceOf(hub, Hub)) {\n      this._hub = hub as Hub;\n    }\n\n    if (!spanContext) {\n      return this;\n    }\n\n    if (spanContext.traceId) {\n      this._traceId = spanContext.traceId;\n    }\n    if (spanContext.spanId) {\n      this._spanId = spanContext.spanId;\n    }\n    if (spanContext.parentSpanId) {\n      this._parentSpanId = spanContext.parentSpanId;\n    }\n    // We want to include booleans as well here\n    if ('sampled' in spanContext) {\n      this.sampled = spanContext.sampled;\n    }\n    if (spanContext.transaction) {\n      this.transaction = spanContext.transaction;\n    }\n    if (spanContext.op) {\n      this.op = spanContext.op;\n    }\n    if (spanContext.description) {\n      this.description = spanContext.description;\n    }\n    if (spanContext.data) {\n      this.data = spanContext.data;\n    }\n    if (spanContext.tags) {\n      this.tags = spanContext.tags;\n    }\n  }\n\n  /**\n   * Attaches SpanRecorder to the span itself\n   * @param maxlen maximum number of spans that can be recorded\n   */\n  public initFinishedSpans(maxlen: number = 1000): void {\n    if (!this.spanRecorder) {\n      this.spanRecorder = new SpanRecorder(maxlen);\n    }\n    this.spanRecorder.startSpan(this);\n  }\n\n  /**\n   * Creates a new `Span` while setting the current `Span.id` as `parentSpanId`.\n   * Also the `sampled` decision will be inherited.\n   */\n  public child(spanContext?: Pick<SpanContext, Exclude<keyof SpanContext, 'spanId'>>): Span {\n    const span = new Span({\n      ...spanContext,\n      parentSpanId: this._spanId,\n      sampled: this.sampled,\n      traceId: this._traceId,\n    });\n\n    span.spanRecorder = this.spanRecorder;\n\n    return span;\n  }\n\n  /**\n   * Continues a trace from a string (usually the header).\n   * @param traceparent Traceparent string\n   */\n  public static fromTraceparent(\n    traceparent: string,\n    spanContext?: Pick<SpanContext, Exclude<keyof SpanContext, 'spanId' | 'sampled' | 'traceid'>>,\n  ): Span | undefined {\n    const matches = traceparent.match(TRACEPARENT_REGEXP);\n    if (matches) {\n      let sampled: boolean | undefined;\n      if (matches[3] === '1') {\n        sampled = true;\n      } else if (matches[3] === '0') {\n        sampled = false;\n      }\n      return new Span({\n        ...spanContext,\n        parentSpanId: matches[2],\n        sampled,\n        traceId: matches[1],\n      });\n    }\n    return undefined;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: string): this {\n    this.tags = { ...this.tags, [key]: value };\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setData(key: string, value: any): this {\n    this.data = { ...this.data, [key]: value };\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setStatus(value: SpanStatus): this {\n    this.setTag('status', value);\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setHttpStatus(httpStatus: number): this {\n    this.setTag('http.status_code', String(httpStatus));\n    const spanStatus = SpanStatus.fromHttpCode(httpStatus);\n    if (spanStatus !== SpanStatus.UnknownError) {\n      this.setStatus(spanStatus);\n    }\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public isSuccess(): boolean {\n    return this.tags.status === SpanStatus.Ok;\n  }\n\n  /**\n   * Sets the finish timestamp on the current span.\n   * @param trimEnd If true, sets the end timestamp of the transaction to the highest timestamp of child spans, trimming\n   * the duration of the transaction span. This is useful to discard extra time in the transaction span that is not\n   * accounted for in child spans, like what happens in the idle transaction Tracing integration, where we finish the\n   * transaction after a given \"idle time\" and we don't want this \"idle time\" to be part of the transaction.\n   */\n  public finish(trimEnd: boolean = false): string | undefined {\n    // This transaction is already finished, so we should not flush it again.\n    if (this.timestamp !== undefined) {\n      return undefined;\n    }\n\n    this.timestamp = timestampWithMs();\n\n    if (this.spanRecorder === undefined) {\n      return undefined;\n    }\n\n    this.spanRecorder.finishSpan(this);\n\n    if (this.transaction === undefined) {\n      // If this has no transaction set we assume there's a parent\n      // transaction for this span that would be flushed out eventually.\n      return undefined;\n    }\n\n    if (this.sampled === undefined) {\n      // At this point a `sampled === undefined` should have already been\n      // resolved to a concrete decision. If `sampled` is `undefined`, it's\n      // likely that somebody used `Sentry.startSpan(...)` on a\n      // non-transaction span and later decided to make it a transaction.\n      logger.warn('Discarding transaction Span without sampling decision');\n      return undefined;\n    }\n\n    const finishedSpans = this.spanRecorder ? this.spanRecorder.finishedSpans.filter(s => s !== this) : [];\n\n    if (trimEnd && finishedSpans.length > 0) {\n      this.timestamp = finishedSpans.reduce((prev: Span, current: Span) => {\n        if (prev.timestamp && current.timestamp) {\n          return prev.timestamp > current.timestamp ? prev : current;\n        }\n        return prev;\n      }).timestamp;\n    }\n\n    return this._hub.captureEvent({\n      contexts: {\n        trace: this.getTraceContext(),\n      },\n      spans: finishedSpans,\n      start_timestamp: this.startTimestamp,\n      tags: this.tags,\n      timestamp: this.timestamp,\n      transaction: this.transaction,\n      type: 'transaction',\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public toTraceparent(): string {\n    let sampledString = '';\n    if (this.sampled !== undefined) {\n      sampledString = this.sampled ? '-1' : '-0';\n    }\n    return `${this._traceId}-${this._spanId}${sampledString}`;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTraceContext(): object {\n    return dropUndefinedKeys({\n      data: Object.keys(this.data).length > 0 ? this.data : undefined,\n      description: this.description,\n      op: this.op,\n      parent_span_id: this._parentSpanId,\n      span_id: this._spanId,\n      status: this.tags.status,\n      tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n      trace_id: this._traceId,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public toJSON(): object {\n    return dropUndefinedKeys({\n      data: Object.keys(this.data).length > 0 ? this.data : undefined,\n      description: this.description,\n      op: this.op,\n      parent_span_id: this._parentSpanId,\n      sampled: this.sampled,\n      span_id: this._spanId,\n      start_timestamp: this.startTimestamp,\n      tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n      timestamp: this.timestamp,\n      trace_id: this._traceId,\n      transaction: this.transaction,\n    });\n  }\n}\n"]}